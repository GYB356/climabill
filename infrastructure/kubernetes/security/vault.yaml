apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault
  namespace: climabill
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-server-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault
  namespace: climabill
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: climabill
data:
  vault-config.json: |
    {
      "listener": {
        "tcp": {
          "address": "0.0.0.0:8200",
          "tls_disable": 1
        }
      },
      "storage": {
        "file": {
          "path": "/vault/data"
        }
      },
      "ui": true,
      "api_addr": "http://vault.climabill.svc:8200",
      "plugin_directory": "/vault/plugins",
      "default_lease_ttl": "168h",
      "max_lease_ttl": "720h",
      "disable_mlock": true
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vault
  namespace: climabill
  labels:
    app: vault
spec:
  serviceName: vault
  replicas: 1
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      serviceAccountName: vault
      containers:
      - name: vault
        image: vault:1.12.1
        command:
        - "/bin/sh"
        - "-c"
        - |
          vault server -config=/vault/config/vault-config.json
        ports:
        - containerPort: 8200
          name: vault-port
          protocol: TCP
        - containerPort: 8201
          name: cluster-port
          protocol: TCP
        env:
        - name: VAULT_ADDR
          value: "http://127.0.0.1:8200"
        - name: POD_IP_ADDR
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: VAULT_CLUSTER_ADDR
          value: "https://$(POD_IP_ADDR):8201"
        - name: VAULT_API_ADDR
          value: "http://$(POD_IP_ADDR):8200"
        - name: SKIP_CHOWN
          value: "true"
        - name: SKIP_SETCAP
          value: "true"
        volumeMounts:
        - name: vault-config
          mountPath: /vault/config
        - name: vault-data
          mountPath: /vault/data
        - name: vault-plugins
          mountPath: /vault/plugins
        securityContext:
          capabilities:
            add: ["IPC_LOCK"]
        readinessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /v1/sys/health
            port: 8200
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
      volumes:
      - name: vault-config
        configMap:
          name: vault-config
      - name: vault-plugins
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: vault-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
      storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: climabill
  labels:
    app: vault
spec:
  selector:
    app: vault
  ports:
  - name: vault-port
    port: 8200
    targetPort: 8200
  - name: cluster-port
    port: 8201
    targetPort: 8201
---
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-init
  namespace: climabill
spec:
  template:
    spec:
      serviceAccountName: vault
      containers:
      - name: vault-init
        image: vault:1.12.1
        command:
        - "/bin/sh"
        - "-c"
        - |
          set -e
          
          # Wait for Vault to start
          sleep 10
          
          export VAULT_ADDR=http://vault:8200
          
          # Check if Vault is already initialized
          INITIALIZED=$(vault status -format=json | jq -r '.initialized')
          
          if [ "$INITIALIZED" = "false" ]; then
            echo "Initializing Vault..."
            # Initialize Vault with 1 key share and 1 key threshold for simplicity
            # In production, you would use multiple key shares and a higher threshold
            INIT_RESPONSE=$(vault operator init -key-shares=1 -key-threshold=1 -format=json)
            
            # Store the unseal key and root token in Kubernetes secrets
            UNSEAL_KEY=$(echo $INIT_RESPONSE | jq -r '.unseal_keys_b64[0]')
            ROOT_TOKEN=$(echo $INIT_RESPONSE | jq -r '.root_token')
            
            kubectl create secret generic vault-keys \
              --from-literal=unseal-key=$UNSEAL_KEY \
              --from-literal=root-token=$ROOT_TOKEN \
              -n climabill
            
            echo "Vault initialized successfully"
            
            # Unseal Vault
            vault operator unseal $UNSEAL_KEY
            
            # Log in to Vault
            vault login $ROOT_TOKEN
            
            # Enable Kubernetes auth
            vault auth enable kubernetes
            
            # Configure Kubernetes auth
            vault write auth/kubernetes/config \
              kubernetes_host="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT" \
              token_reviewer_jwt="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
              kubernetes_ca_cert="$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)" \
              issuer="https://kubernetes.default.svc.cluster.local"
            
            # Enable secrets engines
            vault secrets enable -path=secret kv-v2
            
            # Create policies
            vault policy write climabill-app - <<EOF
            path "secret/data/climabill/*" {
              capabilities = ["read"]
            }
            EOF
            
            # Create Kubernetes auth role
            vault write auth/kubernetes/role/climabill-app \
              bound_service_account_names=climabill-app \
              bound_service_account_namespaces=climabill \
              policies=climabill-app \
              ttl=1h
            
            # Store initial secrets
            vault kv put secret/climabill/database \
              username="climabill" \
              password="$(openssl rand -base64 16)"
            
            vault kv put secret/climabill/redis \
              password="$(openssl rand -base64 16)"
            
            vault kv put secret/climabill/jwt \
              secret="$(openssl rand -base64 32)"
            
            echo "Vault configuration completed"
          else
            echo "Vault is already initialized"
            
            # Get the unseal key from the Kubernetes secret
            UNSEAL_KEY=$(kubectl get secret vault-keys -n climabill -o jsonpath='{.data.unseal-key}' | base64 --decode)
            
            # Check if Vault is sealed
            SEALED=$(vault status -format=json | jq -r '.sealed')
            
            if [ "$SEALED" = "true" ]; then
              echo "Unsealing Vault..."
              vault operator unseal $UNSEAL_KEY
            else
              echo "Vault is already unsealed"
            fi
          fi
        volumeMounts:
        - name: vault-token
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          readOnly: true
      volumes:
      - name: vault-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: 7200
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    fieldPath: metadata.namespace
      restartPolicy: OnFailure
