apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: climabill
data:
  POSTGRES_DB: climabill
  POSTGRES_USER: climabill
  PATRONI_SUPERUSER_USERNAME: postgres
  PATRONI_REPLICATION_USERNAME: replicator
  PATRONI_SCOPE: climabill-postgres
  PATRONI_NAME: "#{POD_NAME}#"
  PATRONI_KUBERNETES_NAMESPACE: climabill
  PATRONI_KUBERNETES_LABELS: "{app: postgres-ha}"
  PATRONI_KUBERNETES_USE_ENDPOINTS: "true"
  PATRONI_POSTGRESQL_CONNECT_ADDRESS: "#{POD_IP}#:5432"
  PATRONI_POSTGRESQL_LISTEN: "0.0.0.0:5432"
  PATRONI_RESTAPI_LISTEN: "0.0.0.0:8008"
  PATRONI_RESTAPI_CONNECT_ADDRESS: "#{POD_IP}#:8008"
  PATRONI_POSTGRESQL_DATA_DIR: /data/pgdata
  PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
  PATRONI_POSTGRESQL_PARAMETERS: |
    max_connections: 500
    shared_buffers: 1GB
    effective_cache_size: 3GB
    maintenance_work_mem: 256MB
    checkpoint_completion_target: 0.9
    wal_buffers: 16MB
    default_statistics_target: 100
    random_page_cost: 1.1
    effective_io_concurrency: 200
    work_mem: 4MB
    min_wal_size: 1GB
    max_wal_size: 4GB
    max_worker_processes: 8
    max_parallel_workers_per_gather: 4
    max_parallel_workers: 8
    wal_level: replica
    hot_standby: "on"
    max_wal_senders: 10
    max_replication_slots: 10
    hot_standby_feedback: "on"
    log_destination: 'csvlog'
    logging_collector: 'on'
    log_directory: 'pg_log'
    log_filename: 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_rotation_age: '1d'
    log_rotation_size: '100MB'
    log_min_duration_statement: 1000
    log_checkpoints: 'on'
    log_connections: 'on'
    log_disconnections: 'on'
    log_lock_waits: 'on'
    log_temp_files: 0
    log_autovacuum_min_duration: 0
    log_line_prefix: '%m [%p] %q%u@%d '
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-ha
  namespace: climabill
spec:
  serviceName: postgres-ha
  replicas: 3
  selector:
    matchLabels:
      app: postgres-ha
  template:
    metadata:
      labels:
        app: postgres-ha
    spec:
      serviceAccountName: postgres-ha
      containers:
      - name: postgres
        image: registry.opensource.zalan.do/acid/spilo-14:2.1-p7
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2
            memory: 4Gi
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: postgres-data
          mountPath: /data
        - name: postgres-run
          mountPath: /run
        env:
        - name: PGDATA
          value: /data/pgdata
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_SUPERUSER_PASSWORD
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_REPLICATION_PASSWORD
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: postgres-config
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /health
            port: 8008
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: postgres-run
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 100Gi
      storageClassName: standard
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ha
  namespace: climabill
  labels:
    app: postgres-ha
spec:
  selector:
    app: postgres-ha
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  - port: 8008
    targetPort: 8008
    protocol: TCP
    name: patroni
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ha-master
  namespace: climabill
  labels:
    app: postgres-ha
    role: master
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  selector:
    app: postgres-ha
    role: master
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-ha-replica
  namespace: climabill
  labels:
    app: postgres-ha
    role: replica
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  selector:
    app: postgres-ha
    role: replica
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-ha
  namespace: climabill
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: postgres-ha
  namespace: climabill
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgres-ha
  namespace: climabill
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: postgres-ha
subjects:
- kind: ServiceAccount
  name: postgres-ha
  namespace: climabill
